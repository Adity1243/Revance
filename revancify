#!/usr/bin/bash

HOME=/data/data/com.termux/files/home
BIN=/data/data/com.termux/files/usr/bin

path=$(find "$HOME" -type d -name "Revancify")
cp "$path/revancify" "$BIN/revancify" > /dev/null 2>&1
DATA=$HOME/revancify-data


terminate()
{
    clear
    echo "Script terminated !!"
    exit 1
}
trap terminate SIGTERM SIGINT SIGABRT

if [ "$(getprop ro.product.cpu.abi)" = "armeabi-v7a" ]
then
    echo "CPU architecture \"armeabi-v7a\" of your device is not supported for patching."
    echo "You may get build errors."
    read -N 1 -s -r -p $'Press ENTER to CONTINUE or SPACE to EXIT...\n' key
    if [ "$key" = " " ]
    then
        echo "Script terminated"
        exit
    fi
fi


checkdependencies()
{
    if bins=$(ls "$BIN") && grep -q java <<< "$bins" && grep -q python <<< "$bins" && grep -q wget <<< "$bins" && grep -q tput <<< "$bins" && grep -q dialog <<< "$bins" && grep -q jq <<< "$bins" && modules=$(pip list) && grep -q wheel <<< "$modules" && grep -q bs4 <<< "$modules" && grep -q requests <<< "$modules" && ls "$HOME/.dialog"* > /dev/null 2>&1 && ls "$BIN/revancify" > /dev/null 2>&1
    then
        return 0
    else
        if ping -c 1 google.com > /dev/null 2>&1
        then
            installdependencies
            checkdependencies
        else
            cp revancify "$BIN/revancify"
            echo "Dependencies not installed. Run again with internet connection."
            exit 1
        fi
    fi
}

installdependencies()
{
    clear
    echo "Installing dependencies..."
    sleep 1
    pkg update -y &&
    pkg install python openjdk-17 wget ncurses-utils dialog jq -y &&
    pip install wheel &&
    pip install requests bs4
    cp revancify "$BIN/revancify"
    wget -q "https://raw.githubusercontent.com/decipher3114/MyConfigs/main/.dialogrc" -O "$HOME/.dialogrc"
    sed -i '/allow-external-apps/s/# //' "$HOME/.termux/termux.properties" &&
    echo "Dependencies installed successfully."
    return 0
}

checkrevancify()
{
    if cd "$path" > /dev/null 2>&1 
    then
        tput civis
        rm -rf ./*cache*
        return 0
    else
        echo -e "\e[1;31mDo you want to install again?\e[0m"
        read -r -p "[Y/N]: " choice
        case "$choice" in
        y|Y ) rm -rf "$path"
            git clone https://github.com/decipher3114/Revancify.git && revancify && exit
        ;;
        n|N ) echo "Removing revancify completely !!"
            sleep 0.5s
            rm "$BIN/revancify"
            echo "Successfully Uninstalled revancify."
            exit 0
        ;;
        ? ) echo "Invalid option !!"
            exit 1
        ;;
        esac
    fi
}

help()
{
    echo -e "\e[1;34mrevancify\n\e[0m"
    echo -e "\e[1;33mUsage:\e[0m \e[1;32mrevancify [OPTION]\n\e[0m"
    echo -e "\e[1;33mOptions:\e[0m"
    echo -e "\e[1;33m-n               \e[1;34mRun revancify as non root\e[0m"
    echo -e "\e[1;33m                 \e[1;34min rooted device"
    echo -e "\e[1;33m-d [OPT],        \e[1;34mDelete the specified component\e[0m"
    echo -e "\e[1;33m --delete [OPT]  \e[1;34mOPT: resources, apps, toml\e[0m"
    echo -e "\e[1;33m-f               \e[1;34mForce update check for resources\e[0m"
    echo -e "\e[1;33m                 \e[1;34mon startup\e[0m"
    echo -e "\e[1;33m-r               \e[1;34mReinstall revancify\e[0m"
    echo -e "\e[1;33m-h,--help        \e[1;34mPrints help statement\e[0m"
    echo -e "\n\e[1;35mGithub repo: https://github.com/decipher3114/Revancify\nTelegram channel: https://t.me/revancify\nTelegram support group: https://t.me/revancifychat\e[0m"
}


case "$1" in
"-h" | "--help" ) help
    exit 0
;;
"-n" | "-f" ) flag="$1"
;;
"-d" | "--delete" ) case "$2" in
        "resources" ) echo -e "\e[1;31mAre you sure you want to delete resources(CLI, patches, integrations)\nfor currently selected source?\e[0m"
        ;;
        "apps" ) echo -e "\e[1;31mAre you sure you want to delete all downloaded apps?\e[0m"
        ;;
        "toml" ) echo -e "\e[1;31mAre you sure you want to delete the options.toml file?\e[0m"
        ;;
        "" ) echo -e "\e[1;31mNo Option specified !!\n\e[0m"
            echo -e "\e[1;33mAllowed Options: resources, apps, toml\n\e[0m"
            exit 1
        ;;
        * ) echo -e "\e[1;31mInvalid option: $2\n\e[0m"
            echo -e "\e[1;33mAllowed Options: resources, apps, toml\n\e[0m"
            exit 1
        ;;
        esac
        read -r -p "[Y/N]: " choice
        case "$choice" in
        y|Y ) flag="$1" 
            arg="$2"
        ;;
        ? ) :
        ;;
        esac
;;
"-r" ) if ping -c 1 google.com > /dev/null 2>&1
    then
        cd "$path"/.. && rm -rf "$path" && git clone https://github.com/decipher3114/Revancify.git && revancify && exit
    fi
;;
"" ) :
;;
* ) echo -e "\e[1;31mInvalid option: $1\n\e[0m"
    help
    exit 1
;;
esac

checkrevancify
dialog --keep-window --no-shadow --keep-window --infobox "\n  █▀█ █▀▀ █░█ ▄▀█ █▄░█ █▀▀ █ █▀▀ █▄█\n  █▀▄ ██▄ ▀▄▀ █▀█ █░▀█ █▄▄ █ █▀░ ░█░  \n\nDeveloper   : decipher\nLast Updated: Checking...\nStatus: Checking..." 10 42
checkdependencies
sleep 1
if ping -c 1 google.com > /dev/null 2>&1
then
    dialog --keep-window --no-shadow --keep-window --infobox "\n  █▀█ █▀▀ █░█ ▄▀█ █▄░█ █▀▀ █ █▀▀ █▄█\n  █▀▄ ██▄ ▀▄▀ █▀█ █░▀█ █▄▄ █ █▀░ ░█░  \n\nDeveloper   : decipher\nLast Updated: $(git log -1 --pretty='format:%cd' --date=format:'%b %d, %Y | %H:%M')\nStatus: Online" 10 42
    if ! git pull > /dev/null 2>&1
    then
        git fetch --all > /dev/null 2>&1
        git reset --hard origin/main > /dev/null 2>&1
    fi
    dialog --keep-window --no-shadow --keep-window --infobox "\n  █▀█ █▀▀ █░█ ▄▀█ █▄░█ █▀▀ █ █▀▀ █▄█\n  █▀▄ ██▄ ▀▄▀ █▀█ █░▀█ █▄▄ █ █▀░ ░█░  \n\nDeveloper   : decipher\nLast Updated: $(git log -1 --pretty='format:%cd' --date=format:'%b %d, %Y | %H:%M')\nStatus: Online" 10 42
else
    dialog --keep-window --no-shadow --keep-window --infobox "\n  █▀█ █▀▀ █░█ ▄▀█ █▄░█ █▀▀ █ █▀▀ █▄█\n  █▀▄ ██▄ ▀▄▀ █▀█ █░▀█ █▄▄ █ █▀░ ░█░  \n\nDeveloper   : decipher\nLast Updated: $(git log -1 --pretty='format:%cd' --date=format:'%b %d, %Y | %H:%M')\nStatus: Offline" 10 42
    sleep 2
fi
cd "$DATA"  > /dev/null 2>&1 || (mkdir -p "$DATA" && cd "$DATA")
bash "$path/main.sh" "$flag" "$arg"
exitstatus=$?
clear
cd "$HOME" || :
if [ $exitstatus -eq 0 ]
then
    echo "Script exited !!"
else
    echo "Script terminated !!"
    rm -rf -- *cache > /dev/null 2>&1
fi
tput cnorm